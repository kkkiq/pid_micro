CCS PCH C Compiler, Version 4.114, 93460303               24-mai-22 00:06

               Filename: d:\iff\eca\2021.2\microcontroladores e microprocessadores\p1\fixed_point_pid\fixed_point_PID.lst

               ROM used: 622 bytes (15%)
                         Largest free fragment is 3470
               RAM used: 47 (18%) at main() level
                         49 (19%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  GOTO   01E2
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* INSTITUTO FEDERAL FLUMINENSE - CAMPOS CENTRO (2021.2): 25/05/2022 
....................    ENGENHARIA DE CONTROLE E AUTOMAÇÃO: MICROPROCESSADORES E MICROCONTROLADORES 
....................    Prof.: ALEXANDRE LEITE 
....................    Aluno: KAIQUE GUIMARÃES CERQUEIRA 
....................    P1: IMPLEMENTAÇÃO DO PID COM ARITMÉTICA DE PONTO FIXO 
.................... */ 
....................  
.................... #include <18F1220.h> 
.................... //////// Standard Header file for the PIC18F1220 device //////////////// 
.................... #device PIC18F1220 
.................... #list 
....................  
.................... #fuses INTRC_IO,NOWDT,NOPROTECT,NOLVP,NOMCLR,NOBROWNOUT 
.................... #use delay(clock=8000000) 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... /*========================== Definir variáveis globais =======================*/ 
.................... int8 memAddress=0; 
.................... signed int8 PID = 0; 
.................... signed int16 y = 0, ref = 0, u = 0; 
.................... signed int16 error[2]; 
.................... signed int16 derivative = 0, proportional = 0, integrative = 0; 
.................... int8 Kp = 1;   // Kp = 2 
.................... int8 Ki = 2;   // Ki = 0.25 
.................... int8 Kd = 3; // Kd = 0.125 
.................... // Ts = 0.03125s ou ~31.25ms: usando bit-shifting, move-se 5 bits 
.................... int8 Ts = 5; 
....................  
.................... /*============================= INTERRUPT DO PID =============================*/  
.................... #int_timer0  
.................... void timer0_interrupt() { 
....................    // SQUARE WAVE TEST 
....................    output_bit(PIN_B0, 1); 
00AE:  BSF    F8A.0
00B0:  BCF    F93.0
....................     
....................    // Aquisition profiling: 124 us (both channels) 
....................    set_adc_channel(0); 
00B2:  MOVLW  00
00B4:  MOVWF  01
00B6:  MOVF   FC2,W
00B8:  ANDLW  E3
00BA:  IORWF  01,W
00BC:  MOVWF  FC2
....................    delay_us(10); 
00BE:  MOVLW  06
00C0:  MOVWF  00
00C2:  DECFSZ 00,F
00C4:  BRA    00C2
00C6:  NOP   
....................    ref = read_adc(); 
00C8:  BSF    FC2.1
00CA:  BTFSC  FC2.1
00CC:  BRA    00CA
00CE:  MOVF   FC4,W
00D0:  CLRF   03
00D2:  MOVWF  1D
00D4:  MOVFF  03,1E
....................    set_adc_channel(1); 
00D8:  MOVLW  04
00DA:  MOVWF  01
00DC:  MOVF   FC2,W
00DE:  ANDLW  E3
00E0:  IORWF  01,W
00E2:  MOVWF  FC2
....................    delay_us(10); 
00E4:  MOVLW  06
00E6:  MOVWF  00
00E8:  DECFSZ 00,F
00EA:  BRA    00E8
00EC:  NOP   
....................    y = read_adc(); 
00EE:  BSF    FC2.1
00F0:  BTFSC  FC2.1
00F2:  BRA    00F0
00F4:  MOVF   FC4,W
00F6:  CLRF   03
00F8:  MOVWF  1B
00FA:  MOVFF  03,1C
....................     
....................    // Computing PID profiling: 62.5 us 
....................    error[1] = error[0]; 
00FE:  MOVFF  22,24
0102:  MOVFF  21,23
....................    error[0] = ref - y; 
0106:  MOVF   1B,W
0108:  SUBWF  1D,W
010A:  MOVWF  21
010C:  MOVF   1C,W
010E:  SUBWFB 1E,W
0110:  MOVWF  22
....................    // Calculando o PID 
....................    integrative = (error[1] >> (Ts + Ki)) + integrative; 
0112:  MOVF   2C,W
0114:  ADDWF  2E,W
0116:  MOVWF  00
0118:  MOVFF  24,30
011C:  MOVFF  23,2F
0120:  MOVF   00,F
0122:  BZ    012E
0124:  BCF    FD8.0
0126:  RRCF   30,F
0128:  RRCF   2F,F
012A:  DECFSZ 00,F
012C:  BRA    0124
012E:  MOVF   2F,W
0130:  ADDWF  29,F
0132:  MOVF   30,W
0134:  ADDWFC 2A,F
....................    derivative = (error[0] - error[1]) << (Ts - Kd); 
0136:  MOVF   23,W
0138:  SUBWF  21,W
013A:  MOVWF  2F
013C:  MOVF   24,W
013E:  SUBWFB 22,W
0140:  MOVWF  30
0142:  MOVF   2D,W
0144:  SUBWF  2E,W
0146:  MOVWF  00
0148:  MOVFF  30,03
014C:  MOVFF  2F,02
0150:  MOVF   00,F
0152:  BZ    015E
0154:  BCF    FD8.0
0156:  RLCF   02,F
0158:  RLCF   03,F
015A:  DECFSZ 00,F
015C:  BRA    0154
015E:  MOVFF  02,25
0162:  MOVFF  03,26
....................    proportional = error[0] << Kp; 
0166:  MOVFF  22,03
016A:  MOVFF  21,02
016E:  MOVF   2B,W
0170:  MOVWF  00
0172:  BZ    017E
0174:  BCF    FD8.0
0176:  RLCF   02,F
0178:  RLCF   03,F
017A:  DECFSZ 00,F
017C:  BRA    0174
017E:  MOVF   02,W
0180:  MOVWF  27
0182:  MOVFF  03,28
....................    u = integrative + derivative + proportional; 
0186:  MOVF   25,W
0188:  ADDWF  29,W
018A:  MOVWF  2F
018C:  MOVF   26,W
018E:  ADDWFC 2A,W
0190:  MOVWF  30
0192:  MOVF   27,W
0194:  ADDWF  2F,W
0196:  MOVWF  1F
0198:  MOVF   28,W
019A:  ADDWFC 30,W
019C:  MOVWF  20
....................     
....................    // Write EPROM profiling: 10 ms 
....................    PID = (int8) u; 
019E:  MOVFF  1F,1A
....................    write_eeprom(memAddress,PID); 
01A2:  MOVFF  19,FA9
01A6:  MOVFF  1A,FA8
01AA:  BCF    FA6.6
01AC:  BCF    FA6.7
01AE:  BSF    FA6.2
01B0:  MOVF   FF2,W
01B2:  MOVWF  00
01B4:  BCF    FF2.7
01B6:  MOVLB  F
01B8:  MOVLW  55
01BA:  MOVWF  FA7
01BC:  MOVLW  AA
01BE:  MOVWF  FA7
01C0:  BSF    FA6.1
01C2:  BTFSC  FA6.1
01C4:  BRA    01C2
01C6:  BCF    FA6.2
01C8:  MOVF   00,W
01CA:  IORWF  FF2,F
....................    memAddress++; 
01CC:  INCF   19,F
....................     
....................    set_timer0(64536);            // 0.001s 
01CE:  MOVLW  FC
01D0:  MOVWF  FD7
01D2:  MOVLW  18
01D4:  MOVWF  FD6
....................    output_bit(PIN_B0, 0); 
01D6:  BCF    F8A.0
01D8:  BCF    F93.0
.................... } // USANDO A DIRETIVA int_timer0, O COMPILADOR CUIDA DE LIMPAR A FLAG 
....................  
....................  
01DA:  BCF    FF2.2
01DC:  MOVLB  0
01DE:  GOTO   0060
.................... void main() { 
01E2:  CLRF   FF8
01E4:  BCF    FD0.7
01E6:  BSF    07.7
01E8:  CLRF   FEA
01EA:  CLRF   FE9
01EC:  MOVLW  72
01EE:  MOVWF  FD3
01F0:  MOVF   FD3,W
01F2:  CLRF   19
01F4:  CLRF   1A
01F6:  CLRF   1C
01F8:  CLRF   1B
01FA:  CLRF   1E
01FC:  CLRF   1D
01FE:  CLRF   20
0200:  CLRF   1F
0202:  CLRF   26
0204:  CLRF   25
0206:  CLRF   28
0208:  CLRF   27
020A:  CLRF   2A
020C:  CLRF   29
020E:  MOVLW  01
0210:  MOVWF  2B
0212:  MOVLW  02
0214:  MOVWF  2C
0216:  MOVLW  03
0218:  MOVWF  2D
021A:  MOVLW  05
021C:  MOVWF  2E
021E:  BCF    FC2.6
0220:  BCF    FC2.7
0222:  MOVF   FC1,W
0224:  ANDLW  80
0226:  IORLW  7F
0228:  MOVWF  FC1
....................     
....................    /*=================== Configurar dois canais do ADC =======================*/ 
....................    setup_adc(  ADC_CLOCK_INTERNAL  ); 
022A:  MOVF   FC0,W
022C:  ANDLW  C0
022E:  IORLW  07
0230:  MOVWF  FC0
0232:  BCF    FC0.7
0234:  BSF    FC2.0
....................    setup_adc_ports( sAN0 | sAN1 ); 
0236:  BCF    FC2.6
0238:  BCF    FC2.7
023A:  MOVF   FC1,W
023C:  ANDLW  80
023E:  IORLW  7C
0240:  MOVWF  FC1
....................    set_adc_channel(0); 
0242:  MOVLW  00
0244:  MOVWF  01
0246:  MOVF   FC2,W
0248:  ANDLW  E3
024A:  IORWF  01,W
024C:  MOVWF  FC2
....................    delay_us( 10 ); 
024E:  MOVLW  06
0250:  MOVWF  00
0252:  DECFSZ 00,F
0254:  BRA    0252
0256:  NOP   
....................    read_adc(ADC_START_ONLY); 
0258:  BSF    FC2.1
....................     
....................    /*========================== Configurar timer =============================*/ 
....................     
....................    // INTERNAL CLOCK SOURCE(8MHz), PRESCALER 1:2 VALUE: 1uS PER INCREMENT(1MHz) 
....................    setup_timer_0( T0_INTERNAL | T0_DIV_2 ); 
025A:  MOVLW  80
025C:  MOVWF  FD5
....................    // INITIALIZE TIMER0 CLOCK (WITH DEFINED VALUE)REDO CALC 
....................    // 16-BIT TIMER: COUNT FROM 0 TO 65535 
....................    // 8 MHz CLOCK, 1:8 PRESCALER, SET TIMER0 TO OVERFLOW IN 20ms 
....................    //set_timer0(60535);         // TIMER0 BIAS: 65536 - (0.02 / ((4/8000000) * 2)) 
....................    set_timer0(64536);            // 0.001s 
025E:  MOVLW  FC
0260:  MOVWF  FD7
0262:  MOVLW  18
0264:  MOVWF  FD6
....................    /*======================== TIMER0 como Interrupt ==========================*/ 
....................    clear_interrupt( INT_TIMER0 );   // PULL DOWN TIMER0 INTERRUPT FLAG 
0266:  BCF    FF2.2
....................    enable_interrupts( GLOBAL );     // ENABLES GLOBAL INTERRUPTS 
0268:  MOVLW  C0
026A:  IORWF  FF2,F
....................    enable_interrupts( INT_TIMER0 ); // ENABLES TIMER0 OVERFLOW INTERRUPT 
026C:  BSF    FF2.5
....................     
....................    while (1) 
....................    { 
....................       // While vazio 
....................    } 
026E:  BRA    026E
.................... } 
0270:  SLEEP 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E0C   PUT NOBROWNOUT NOWDT WDT32768
   Word  3: 0000   NOMCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB
